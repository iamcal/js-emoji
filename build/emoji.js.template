;(function(local_setup) {

/**
 * @global
 * @namespace
 */
function emoji(){}
	/**
	 * The set of images to use for graphical emoji.
	 *
	 * @memberof emoji
	 * @type {string}
	 */
	emoji.img_set = 'apple';

	/**
	 * Configuration details for different image sets. This includes a path to a directory containing the
	 * individual images (`path`) and a URL to sprite sheets (`sheet`). All of these images can be found
	 * in the [emoji-data repository]{@link https://github.com/iamcal/emoji-data}. Using a CDN for these
	 * is not a bad idea.
	 *
	 * @memberof emoji
	 * @type {
	 */
	emoji.img_sets = {
		'apple'    : {'path' : '/emoji-data/img-apple-64/'   , 'sheet' : '/emoji-data/sheet_apple_64.png',    'mask' : 1 },
		'google'   : {'path' : '/emoji-data/img-google-64/'  , 'sheet' : '/emoji-data/sheet_google_64.png',   'mask' : 2 },
		'twitter'  : {'path' : '/emoji-data/img-twitter-64/' , 'sheet' : '/emoji-data/sheet_twitter_64.png',  'mask' : 4 },
		'emojione' : {'path' : '/emoji-data/img-emojione-64/', 'sheet' : '/emoji-data/sheet_emojione_64.png', 'mask' : 8 }
	};

	/**
	 * Use a CSS class instead of specifying a sprite or background image for
	 * the span representing the emoticon. This requires a CSS sheet with
	 * emoticon data-uris.
	 *
	 * @memberof emoji
	 * @type bool
	 * @todo document how to build the CSS stylesheet this requires.
	 */
	emoji.use_css_imgs = false;

	/**
	 * Instead of replacing emoticons with the appropriate representations,
	 * replace them with their colon string representation.
	 * @memberof emoji
	 * @type bool
	 */
	emoji.colons_mode = false;
	emoji.text_mode = false;

	/**
	 * If true, sets the "title" property on the span or image that gets
	 * inserted for the emoticon.
	 * @memberof emoji
	 * @type bool
	 */
	emoji.include_title = false;

	/**
	 * If the platform supports native emoticons, use those instead
	 * of the fallbacks.
	 * @memberof emoji
	 * @type bool
	 */
	emoji.allow_native = true;

	/**
	 * Set to true to use CSS sprites instead of individual images on 
	 * platforms that support it.
	 *
	 * @memberof emoji
	 * @type bool
	 */
	emoji.use_sheet = false;

	/**
	 *
	 * Set to true to avoid black & white native Windows emoji being used.
	 *
	 * @memberof emoji
	 * @type bool
	 */
	emoji.avoid_ms_emoji = true;

	// Keeps track of what has been initialized.
	/** @private */
	emoji.inits = {};
	emoji.map = {};

	/**
	 * @memberof emoji
	 * @param {string} str A string potentially containing ascii emoticons
	 * (ie. `:)`)
	 *
	 * @returns {string} A new string with all emoticons in `str`
	 * replaced by a representatation that's supported by the current
	 * environtment.
	 */
	emoji.replace_emoticons = function(str){
		emoji.init_emoticons();
		return str.replace(emoji.rx_emoticons, function(m, $1, $2){
			var val = emoji.map.emoticons[$2];
			return val ? $1+emoji.replacement(val, $2) : m;
		});
	};

	/**
	 * @memberof emoji
	 * @param {string} str A string potentially containing ascii emoticons
	 * (ie. `:)`)
	 *
	 * @returns {string} A new string with all emoticons in `str`
	 * replaced by their colon string representations (ie. `:smile:`)
	 */
	emoji.replace_emoticons_with_colons = function(str){
		emoji.init_emoticons();
		var _prev_offset = 0;
		var emoticons_with_parens = [];
		var str_replaced = str.replace(emoji.rx_emoticons, function(m, $1, emoticon, offset){
			var prev_offset = _prev_offset;
			_prev_offset = offset + m.length;

			var has_open_paren = emoticon.indexOf('(') !== -1;
			var has_close_paren = emoticon.indexOf(')') !== -1;

			/*
			 * Track paren-having emoticons for fixing later
			 */
			if ((has_open_paren || has_close_paren) && emoticons_with_parens.indexOf(emoticon) == -1) {
				emoticons_with_parens.push(emoticon);
			}

			/*
			 * Look for preceding open paren for emoticons that contain a close paren
			 * This prevents matching "8)" inside "(around 7 - 8)"
			 */
			if (has_close_paren && !has_open_paren) {
				var piece = str.substring(prev_offset, offset);
				if (piece.indexOf('(') !== -1 && piece.indexOf(')') === -1) return m;
			}

			/*
			 * See if we're in a numbered list
			 * This prevents matching "8)" inside "7) foo\n8) bar"
			 */
			if (m === '\n8)') {
				var before_match = str.substring(0, offset);
				if (/\n?(6\)|7\))/.test(before_match)) return m;
			}

			var val = emoji.data[emoji.map.emoticons[emoticon]][3][0];
			return val ? $1+':'+val+':' : m;
		});

		/*
		 * Come back and fix emoticons we ignored because they were inside parens.
		 * It's useful to do this at the end so we don't get tripped up by other,
		 * normal emoticons
		 */
		if (emoticons_with_parens.length) {
			var escaped_emoticons = emoticons_with_parens.map(emoji.escape_rx);
			var parenthetical_rx = new RegExp('(\\(.+)('+escaped_emoticons.join('|')+')(.+\\))', 'g');

			str_replaced = str_replaced.replace(parenthetical_rx, function(m, $1, emoticon, $2) {
				var val = emoji.data[emoji.map.emoticons[emoticon]][3][0];
				return val ? $1+':'+val+':'+$2 : m;
			});
		}

		return str_replaced;
	};

	/**
	 * @memberof emoji
	 * @param {string} str A string potentially containing colon string
	 * representations of emoticons (ie. `:smile:`)
	 *
	 * @returns {string} A new string with all colon string emoticons replaced
	 * with the appropriate representation.
	 */
	emoji.replace_colons = function(str){
		emoji.init_colons();

		return str.replace(emoji.rx_colons, function(m){
			var idx = m.substr(1, m.length-2);

			// special case - an emoji with a skintone modified
			if (idx.indexOf('::skin-tone-') > -1){

				var skin_tone = idx.substr(-1, 1);
				var skin_idx = 'skin-tone-'+skin_tone;
				var skin_val = emoji.map.colons[skin_idx];

				idx = idx.substr(0, idx.length - 13);

				var val = emoji.map.colons[idx];
				if (val){
					return emoji.replacement(val, idx, ':', {
						'idx'		: skin_val,
						'actual'	: skin_idx,
						'wrapper'	: ':'
					});
				}else{
					return ':' + idx + ':' + emoji.replacement(skin_val, skin_idx, ':');
				}
			}else{
				var val = emoji.map.colons[idx];
				return val ? emoji.replacement(val, idx, ':') : m;
			}
		});
	};

	/**
	 * @memberof emoji
	 * @param {string} str A string potentially containing unified unicode
	 * emoticons. (ie. ðŸ˜„)
	 *
	 * @returns {string} A new string with all unicode emoticons replaced with
	 * the appropriate representation for the current environment.
	 */
	emoji.replace_unified = function(str){
		emoji.init_unified();
		return str.replace(emoji.rx_unified, function(m, p1, p2){
			var val = emoji.map.unified[p1];
			if (!val) return m;
			var idx = null;
			if (p2 == '\uD83C\uDFFB') idx = '1f3fb';
			if (p2 == '\uD83C\uDFFC') idx = '1f3fc';
			if (p2 == '\uD83C\uDFFD') idx = '1f3fd';
			if (p2 == '\uD83C\uDFFE') idx = '1f3fe';
			if (p2 == '\uD83C\uDFFF') idx = '1f3ff';
			if (idx){
				return emoji.replacement(val, null, null, {
					idx	: idx,
					actual	: p2,
					wrapper	: ''
				});
			}
			return emoji.replacement(val);
		});
	};

	// Does the actual replacement of a character with the appropriate
	/** @private */
	emoji.replacement = function(idx, actual, wrapper, variation){

		// for emoji with variation modifiers, set `etxra` to the standalone output for the
		// modifier (used if we can't combine the glyph) and set variation_idx to key of the
		// variation modifier (used below)
		var extra = '';
		var variation_idx = 0;
		if (typeof variation === 'object'){
			extra = emoji.replacement(variation.idx, variation.actual, variation.wrapper);
			variation_idx = idx + '-' + variation.idx;
		}

		// deal with simple modes (colons and text) first
		wrapper = wrapper || '';
		if (emoji.colons_mode) return ':'+emoji.data[idx][3][0]+':'+extra;
		var text_name = (actual) ? wrapper+actual+wrapper : emoji.data[idx][8] || wrapper+emoji.data[idx][3][0]+wrapper;
		if (emoji.text_mode) return text_name + extra;

		// native modes next.
		// for variations selectors, we just need to output them raw, which `extra` will contain.
		emoji.init_env();
		if (emoji.replace_mode == 'unified'  && emoji.allow_native && emoji.data[idx][0][0]) return emoji.data[idx][0][0] + extra;
		if (emoji.replace_mode == 'softbank' && emoji.allow_native && emoji.data[idx][1]) return emoji.data[idx][1] + extra;
		if (emoji.replace_mode == 'google'   && emoji.allow_native && emoji.data[idx][2]) return emoji.data[idx][2] + extra;

		// finally deal with image modes.
		// variation selectors are more complex here - if the image set and particular emoji supports variations, then
		// use the variation image. otherwise, return it as a separate image (already calculated in `extra`).
		// first we set up the params we'll use if we can't use a variation.
		var img = emoji.data[idx][7] || emoji.img_sets[emoji.img_set].path+idx+'.png';
		var title = emoji.include_title ? ' title="'+(actual || emoji.data[idx][3][0])+'"' : '';
		var text  = emoji.include_text  ? wrapper+(actual || emoji.data[idx][3][0])+wrapper : '';
		var px = emoji.data[idx][4];
		var py = emoji.data[idx][5];

		// now we'll see if we can use a varition. if we can, we can override the params above and blank
		// out `extra` so we output a sinlge glyph.
		// we need to check that:
		//  * we requested a variation
		//  * such a variation exists in `emoji.variations_data`
		//  * we're not using a custom image for this glyph
		//  * the variation has an image defined for the current image set
		if (variation_idx && emoji.variations_data[variation_idx] && emoji.variations_data[variation_idx][2] && !emoji.data[idx][9]){
			if (emoji.variations_data[variation_idx][2] & emoji.img_sets[emoji.img_set].mask){
				img = emoji.img_sets[emoji.img_set].path+variation_idx+'.png';
				px = emoji.variations_data[variation_idx][0];
				py = emoji.variations_data[variation_idx][1];
				extra = '';
			}
		}

		if (emoji.supports_css) {
			if (emoji.use_sheet && px != null && py != null){
				var mul = 100 / (emoji.sheet_size - 1);
				var style = 'background: url('+emoji.img_sets[emoji.img_set].sheet+');background-position:'+(mul*px)+'% '+(mul*py)+'%;background-size:'+emoji.sheet_size+'00%';
				return '<span class="emoji-outer emoji-sizer"><span class="emoji-inner" style="'+style+'"'+title+'>'+text+'</span></span>'+extra;
			}else if (emoji.use_css_imgs){
				return '<span class="emoji emoji-'+idx+'"'+title+'>'+text+'</span>'+extra;
			}else{
				return '<span class="emoji emoji-sizer" style="background-image:url('+img+')"'+title+'>'+text+'</span>'+extra;
			}
		}
		return '<img src="'+img+'" class="emoji" '+title+'/>'+extra;
	};

	// Initializes the text emoticon data
	/** @private */
	emoji.init_emoticons = function(){
		if (emoji.inits.emoticons) return;
		emoji.init_colons(); // we require this for the emoticons map
		emoji.inits.emoticons = 1;
		
		var a = [];
		emoji.map.emoticons = {};
		for (var i in emoji.emoticons_data){
			// because we never see some characters in our text except as entities, we must do some replacing
			var emoticon = i.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
			
			if (!emoji.map.colons[emoji.emoticons_data[i]]) continue;

			emoji.map.emoticons[emoticon] = emoji.map.colons[emoji.emoticons_data[i]];
			a.push(emoji.escape_rx(emoticon));
		}
		emoji.rx_emoticons = new RegExp(('(^|\\s)('+a.join('|')+')(?=$|[\\s|\\?\\.,!])'), 'g');
	};

	// Initializes the colon string data
	/** @private */
	emoji.init_colons = function(){
		if (emoji.inits.colons) return;
		emoji.inits.colons = 1;
		emoji.rx_colons = new RegExp('\:[a-zA-Z0-9-_+]+\:(\:skin-tone-[2-6]\:)?', 'g');
		emoji.map.colons = {};
		for (var i in emoji.data){
			for (var j=0; j<emoji.data[i][3].length; j++){
				emoji.map.colons[emoji.data[i][3][j]] = i;
			}
		}
	};

	// initializes the unified unicode emoticon data
	/** @private */
	emoji.init_unified = function(){
		if (emoji.inits.unified) return;
		emoji.inits.unified = 1;

		var a = [];
		emoji.map.unified = {};

		for (var i in emoji.data){
			for (var j=0; j<emoji.data[i][0].length; j++){
				a.push(emoji.data[i][0][j].replace('*', '\\*'));
				emoji.map.unified[emoji.data[i][0][j]] = i;
			}
		}

		a = a.sort(function(a,b){
			 return b.length - a.length;
		});

		emoji.rx_unified = new RegExp('('+a.join('|')+')(\uD83C[\uDFFB-\uDFFF])?', "g");
	};

	// initializes the environment, figuring out what representation
	// of emoticons is best.
	/** @private */
	emoji.init_env = function(){
		if (emoji.inits.env) return;
		emoji.inits.env = 1;
		emoji.replace_mode = 'img';
		emoji.supports_css = false;
		if (typeof(navigator) !== 'undefined') {
			var ua = navigator.userAgent;
			if (window.getComputedStyle){
				var st = window.getComputedStyle(document.body);
				if (st['background-size'] || st['backgroundSize']){
					emoji.supports_css = true;
				}
			}
			if (ua.match(/(iPhone|iPod|iPad|iPhone\s+Simulator)/i)){
				if (ua.match(/OS\s+[12345]/i)){
					emoji.replace_mode = 'softbank';
					return;
				}
				if (ua.match(/OS\s+[6789]/i)){
					emoji.replace_mode = 'unified';
					return;
				}
			}
			if (ua.match(/Mac OS X 10[._ ](?:[789]|1\d)/i)){
				if (!ua.match(/Chrome/i) && !ua.match(/Firefox/i)){
					emoji.replace_mode = 'unified';
					return;
				}
			}
			if (!emoji.avoid_ms_emoji){
				if (ua.match(/Windows NT 6.[1-9]/i) || ua.match(/Windows NT 10.[0-9]/i)){
					if (!ua.match(/Chrome/i) && !ua.match(/MSIE 8/i)){
						emoji.replace_mode = 'unified';
						return;
					}
				}
			}
		}

		// Need a better way to detect android devices that actually
		// support emoji.
		if (false && ua.match(/Android/i)){
			emoji.replace_mode = 'google';
			return;
		}
		if (emoji.supports_css){
			emoji.replace_mode = 'css';
		}
		// nothing fancy detected - use images
	};
	/** @private */
	emoji.escape_rx = function(text){
		return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	};
	emoji.sheet_size = #SHEET-SIZE#;
	/** @private */
	emoji.data = #DATA#;
	/** @private */
	emoji.emoticons_data = #DATA-TEXT#;
	/** @private */
	emoji.variations_data = #DATA-VARS#;

	if (typeof exports === 'object'){
		module.exports = emoji;
	}else if (typeof define === 'function' && define.amd){
		define(function() { return emoji; });
	}else{
		this.emoji = emoji;
	}
	
	if (local_setup) local_setup(emoji);
}).call(function(){
	return this || (typeof window !== 'undefined' ? window : global);
}(), function(emoji) {
	
	// Set up emoji for your environment here!
	// For instance, you might want to always
	// render emoji as HTML, and include the
	// name as the title of the HTML elements:

	/*
	emoji.include_title = true;
	emoji.allow_native = false;
	*/

	// And you might want to always use
	// Google's emoji images:

	/*
	emoji.img_set = 'google';
	*/

	// And you might want want to point to
	// a CDN for your sheets and img files

	/*
	emoji.img_sets['google']['path'] = 'http://cdn.example.com/emoji/';
	emoji.img_sets['google']['sheet'] = 'http://cdn.example.com/emoji/sheet_google_64.png';
	*/

});
